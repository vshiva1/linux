/*
 * Intel Cache Quality-of-Service Monitoring (CQM) support.
 *
 * A Resource Manager ID (RMID) is a u32 value that, when programmed in a
 * logical CPU, will allow the LLC cache to associate the changes in occupancy
 * generated by that cpu (cache lines allocations - deallocations) to the RMID.
 * If a RMID has been assigned to a thread T long enough for all cache lines
 * used by T to be allocated, then the occupancy reported by the hardware
 * equals the total cache occupancy for T.
 *
 * Groups of threads that are to be monitored together (such as cgroups
 * or processes) can shared a RMID.
 *
 * This driver implements a tree hierarchy of Monitored Resources (monr). Each
 * monr is a cgroup, a process or a thread that needs one single RMID.
 *
 * Since the number of RMIDs is relatively small to the number of potential
 * monitored elements, RMIDs must be "rotated" among all monitored elements.
 */

#include <linux/perf_event.h>
#include <asm/pqr_common.h>
#include <asm/topology.h>

/*
 * struct prmid: Package RMID. Per-package wrapper for a rmid.
 * @last_read_value:	Least read value.
 * @last_read_time:	Time last read, used when throtling read rate.
 * @pool_entry:		Attaches to a prmid pool in cqm_pkg_data.
 * @rmid:		The rmid value to be programed in hardware.
 *
 * Its accesors ensure that CQM events for this rmid are read atomically and
 * allow to throtle the frequency of reads to up to one each
 * __rmid_min_update_time ms.
 */
struct prmid {
	atomic64_t		last_read_value;
	atomic64_t		last_read_time;
	struct list_head	pool_entry;
	u32			rmid;
};

/*
 * Time between execution of rotation logic. The frequency of execution does
 * not affect the rate at which RMIDs are recycled, except by the delay by the
 * delay updating the prmid's and their pools.
 * The rotation period is stored in pmu->hrtimer_interval_ms.
 */
#define CQM_DEFAULT_ROTATION_PERIOD 1200	/* ms */
